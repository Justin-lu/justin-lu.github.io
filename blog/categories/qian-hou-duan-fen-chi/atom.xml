<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 前后端分离 | Hi I'm Justin-lu]]></title>
  <link href="http://justin-lu.github.io/blog/categories/qian-hou-duan-fen-chi/atom.xml" rel="self"/>
  <link href="http://justin-lu.github.io/"/>
  <updated>2016-08-19T21:00:03+08:00</updated>
  <id>http://justin-lu.github.io/</id>
  <author>
    <name><![CDATA[Justin-lu]]></name>
    <email><![CDATA[gdjyluxiaoyong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[前后端分离实践 — 如何解决跨域问题]]></title>
    <link href="http://justin-lu.github.io/blog/2016/08/19/qian-hou-duan-fen-chi-shi-jian-ru-he-jie-jue-kua-yu-wen-ti/"/>
    <updated>2016-08-19T20:51:22+08:00</updated>
    <id>http://justin-lu.github.io/blog/2016/08/19/qian-hou-duan-fen-chi-shi-jian-ru-he-jie-jue-kua-yu-wen-ti</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/Justin-lu/react-redux-antd/issues/4">原文链接</a></p>

<p>随着前端越来越火，越来越多的人推崇前后端分离，后端只提供API，前端只负责消费API。这样我们就能更加专注自己的事情了，比如前端可以使用任何想要的工具（Webpack、Gulp等等），后端也不用因为集成前端的代码而苦逼加班了。这里不讨论前后端分离的必要性，更多可参考</p>

<!-- More -->


<ul>
<li><a href="http://2014.jsconf.cn/slides/herman-taobaoweb/#/96">淘宝前后端分离实践</a></li>
<li><a href="http://frontenddev.org/column/taobao-full-stack-development/">淘宝前后端分离系列文章</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;mid=2651493177&amp;idx=1&amp;sn=730545f530e7d6506b884ab46462169a&amp;scene=7#wechat_redirect">我们为什么要尝试前后端分离</a></li>
</ul>


<p>这里主要分享前后端分离后，如何解决跨域问题</p>

<h2>服务端</h2>

<h3>Rails</h3>

<p>作为一个<code>Rails</code>程序员，首先分享一下在<code>Rails</code>里面的解决方案, 大家可以使用一个<a href="https://github.com/cyu/rack-cors">rack-cors</a> 中间件，并作以下配置:</p>

<pre><code class="ruby">#config/application.rb
    config.middleware.insert_before 0, "Rack::Cors", :debug =&gt; true, :logger =&gt; (-&gt; { Rails.logger }) do
      allow do
        origins ['http://localhost:3000']
        resource '*',
          :headers =&gt; :any,
          :methods =&gt; [:get, :post, :delete, :put, :options, :head],
          :max_age =&gt; 0
      end
    end
</code></pre>

<p>更多配置请参考 <a href="https://github.com/cyu/rack-cors">rack-cors</a></p>

<h3>Node</h3>

<p>当然，如果后端是<code>NodeJs</code>，我们也可以找到同样的中间件 <a href="https://github.com/expressjs/cors">cors</a> 请看以下配置</p>

<pre><code class="javascript">var express = require('express')
  , cors = require('cors')
  , app = express();

// 同样的，只支持开发环境跨域
if(process.env.NODE_ENV == 'development'){
  app.use(cors());
}
</code></pre>

<h2>Nginx</h2>

<p>这时候，后端程序员可能会说，为了保持跟生产环境配置一直，请直接用 <code>Nginx</code> 来配置吧，这样能减少差异。啪啦啪啦&hellip;
直接看配置吧
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       80<span class="p">;</span>
</span><span class='line'>    <span class="c"># 配置可访问域名，注意需要添加相应host配置</span>
</span><span class='line'>    server_name xxx.dev<span class="p">;</span>
</span><span class='line'>    <span class="c">#charset koi8-r;</span>
</span><span class='line'>    error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
</span><span class='line'>        root   html<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;location /api/v1 <span class="o">{</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-For <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="c"># API Server</span>
</span><span class='line'>    proxy_pass http://localhost:4000<span class="p">;</span>
</span><span class='line'>    proxy_next_upstream error<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>location / <span class="o">{</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Forwarded-For <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="c"># Frontend Server</span>
</span><span class='line'>    proxy_pass http://localhost:3000<span class="p">;</span>
</span><span class='line'>    proxy_next_upstream error<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    proxy_http_version 1.1<span class="p">;</span>
</span><span class='line'>    proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
</span><span class='line'>    proxy_set_header Connection <span class="s2">&quot;upgrade&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>http-proxy-middleware</h2>

<p>这时候前端也不服了，说，我们自己能搞定
PS： 其实这里用了Nginx配置之后，webpack的hot reload会存在比较大的延迟，具体原因还没研究</p>

<pre><code># 安装插件
cnpm install --save-dev http-proxy-middleware

# 添加配置
import proxy from 'http-proxy-middleware';

const apiProxy = proxy('/api/v1', {
    target: 'http://localhost:4000',
    changeOrigin: true,
    ws: true
});
browserSync({
  server: {
    baseDir: 'src',

    middleware: [
      apiProxy,
      ...
    ]
  }
})
</code></pre>

<p>更多参考
- <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middelware</a>
- <a href="https://github.com/Justin-lu/react-redux-antd/commit/54699dba93dbcdd61837ade6616d7ca13039cb78">add http-proxy-middleware as api proxy</a></p>

<h2>Chrome</h2>

<p>你也可以通过添加chrome插件来支持跨域
<a href="https://chrome.google.com/webstore/detail/omcncfnpmcabckcddookmnajignpffnh">CORS Toggle</a></p>
]]></content>
  </entry>
  
</feed>
