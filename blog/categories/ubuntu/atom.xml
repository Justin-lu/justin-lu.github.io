<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Hi I'm Justin-lu]]></title>
  <link href="http://justin-lu.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://justin-lu.github.io/"/>
  <updated>2016-08-19T21:00:03+08:00</updated>
  <id>http://justin-lu.github.io/</id>
  <author>
    <name><![CDATA[Justin-lu]]></name>
    <email><![CDATA[gdjyluxiaoyong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu常用软件]]></title>
    <link href="http://justin-lu.github.io/blog/2013/07/12/ubuntuchang-yong-ruan-jian/"/>
    <updated>2013-07-12T10:00:00+08:00</updated>
    <id>http://justin-lu.github.io/blog/2013/07/12/ubuntuchang-yong-ruan-jian</id>
    <content type="html"><![CDATA[<p>Ubuntu常用软件收集。</p>

<!-- More -->


<ol>
<li><p><code>gnome do</code> 功能：能够快速查找文件，包括文件夹，文件名，程序。。。</p></li>
<li><p><code>Cairo-dock</code> 功能：美化桌面，导航等。</p></li>
<li><p><code>Gvim</code> 功能：一个功能强大的文本编辑器。特别适合用来编辑ruby文件。<a href="https://github.com/Justin-lu/.vim">vimrc配置文档</a></p></li>
<li><p><code>Filezila</code> 功能：FileZilla是一个免费开源的FTP客户端软件，分为客户端版本和服务器版本，具备所有的FTP软件功能。可控性、有条理的界面和管理多站点的简化方式使得Filezilla客户端版成为一个方便高效的FTP客户端工具，而FileZilla Server则是一个小巧并且可靠的支持FTP&amp;SFTP的FTP服务器软件</p></li>
<li><p><code>CompizConfig</code> 功能：美化。</p></li>
<li><p><code>Guake Terminal</code> linux下的一种终端，比较方便</p></li>
<li><p><code>hromium浏览器</code>：简洁快速的网际浏览器 (推荐使用)</p></li>
<li><p><code>亦歌</code>：在线音乐播放器</p></li>
<li><p>右键管理员和终端打开（推荐使用，不是软件，baidu百度该关键字）</p></li>
</ol>


<pre><code class="c">sudo apt-get install nautilus-open-terminal
sudo apt-get install nautilus-gksu
</code></pre>

<blockquote><p>ubuntu11.04右键管理员失效解决
<code>c
sudo cp /usr/lib/nautilus/extensions-2.0/libnautilus-gksu.so /usr/lib/nautilus/extensions-3.0/
killall nautilus
</code></p></blockquote>

<p>10.<code>ssh</code>的安装</p>

<pre><code class="c">sudo apt-get install ssh
</code></pre>

<hr />

<ol>
<li><p>安装rails</p></li>
<li><p>安装rvm</p></li>
<li><p><code>diagram</code></p></li>
<li><p><code>wakoopa</code></p></li>
<li><p><code>mysqlworkbench</code></p></li>
<li><p><a href="http://justin-lu.github.io/blog/blog/2013/07/12/ubuntu12-dot-10yi-shang-an-zhuang-gu-ge-shu-ru-fa-%2C-sou-gou-shu-ru-deng/">小企鹅输入法安装</a></p></li>
<li><p><code>VirtualBox</code> ubuntu下比较好的虚拟机(怀念window的，可以装一个winxp)</p></li>
<li><p><code>Adobe AIR</code> ubuntu下，AIR软件安装所需软件，如微博AIR等</p></li>
<li><p><code>Dia Diagram Editor</code> ubuntu下类似visio的画图软件</p></li>
<li><p><code>dropbox</code> &amp;&amp; <code>Yunio</code>跨平台的云端软件</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.10以上安装谷歌输入法、搜狗输入等]]></title>
    <link href="http://justin-lu.github.io/blog/2013/07/12/ubuntu12-dot-10yi-shang-an-zhuang-gu-ge-shu-ru-fa-,-sou-gou-shu-ru-deng/"/>
    <updated>2013-07-12T09:47:00+08:00</updated>
    <id>http://justin-lu.github.io/blog/2013/07/12/ubuntu12-dot-10yi-shang-an-zhuang-gu-ge-shu-ru-fa-,-sou-gou-shu-ru-deng</id>
    <content type="html"><![CDATA[<p>Ubuntu12.10以上安装谷歌输入法、搜狗输入等</p>

<!-- More -->


<p>1.卸载Ibus本地输入法</p>

<pre><code class="c">sudo apt-get remove ibus
</code></pre>

<p>2.为系统添加Fcitx源</p>

<pre><code class="c">sudo add-apt-repository ppa:fcitx-team/nightly
</code></pre>

<p>3.更新源</p>

<pre><code class="c">sudo apt-get update
</code></pre>

<p>4.安装fcitx，双拼，google拼音，云拼音，搜狗拼音（选择需要的安装）</p>

<pre><code class="c">sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin fcitx-googlepinyin fcitx-module-cloudpinyin  fcitx-sogoupinyin
</code></pre>

<p>5.安装fcitx默认的所有输入法</p>

<pre><code class="c">sudo apt-get install fcitx-table-all
</code></pre>

<p>6.设置默认fcitx</p>

<pre><code class="c">im-switch -s fcitx -z default
</code></pre>

<p>7.注销系统，通过Ctrl+空格可以切换输入法，右击图标选择输入法，可以选择不同输入法。1.卸载Ibus本地输入法</p>

<pre><code class="c">sudo apt-get remove ibus
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu常用指令]]></title>
    <link href="http://justin-lu.github.io/blog/2013/07/12/ubuntuchang-yong-zhi-ling/"/>
    <updated>2013-07-12T09:19:00+08:00</updated>
    <id>http://justin-lu.github.io/blog/2013/07/12/ubuntuchang-yong-zhi-ling</id>
    <content type="html"><![CDATA[<p>基本的Ubuntu指令的使用介绍</p>

<!-- More -->


<h3>基本的Ubuntu指令</h3>

<hr />

<p><code>sudo apt－get install</code> 软件名 安装软件命令</p>

<p><code>sudo apt-get autoremove</code> 软件名 卸载软件命令</p>

<p><code>sudo nautilus</code>打开文件（有root权限）</p>

<p><code>su root</code> 切换到“root”</p>

<p><code>ls</code> 列出当前目录文件（不包括隐含文件）</p>

<p><code>ls -a</code> 列出当前目录文件（包括隐含文件）</p>

<p><code>ls -l</code> 列出当前目录下文件的详细信息</p>

<p><code>cd ..</code> 回当前目录的上一级目录</p>

<p><code>cd -</code> 回上一次所在的目录</p>

<p><code>cd ~</code>或 <code>cd</code> 回当前用户的宿主目录</p>

<p><code>mkdir</code> 目录名 创建一个目录</p>

<p><code>rmdir</code> 空目录名 删除一个空目录</p>

<p><code>rm</code> 文件名 文件名 删除一个文件或多个文件</p>

<p><code>rm -rf</code> 非空目录名 删除一个非空目录下的一切</p>

<p><code>mv 路经/文件 /经/文件</code>移动相对路经下的文件到绝对路经下</p>

<p><code>mv 文件名 新名称</code> 在当前目录下改名</p>

<p><code>find 路经 -name “字符串”</code>查找路经所在范围内满足字符串匹配的文件和目录</p>

<p><code>ack-grep 字符串</code> 同上</p>

<p><code>fdisk fdisk -l</code> 查看系统分区信息</p>

<p><code>fdisk fdisk /dev/sdb</code> 为一块新的SCSI硬盘进行分区</p>

<p><code>chown chown root /home</code> 把/home的属主改成root用户</p>

<p><code>chgrp chgrp root /home</code> 把/home的属组改成root组</p>

<p><code>Useradd</code> 创建一个新的用户</p>

<p><code>Groupadd 组名</code> 创建一个新的组</p>

<p><code>Passwd 用户名</code>为用户创建密码</p>

<p><code>Passwd -d用户名</code> 删除用户密码也能登陆</p>

<p><code>Passwd -S用户名</code> 查询账号密码</p>

<p><code>Usermod -l</code> 新用户名 老用户名 为用户改名</p>

<p><code>Userdel–r</code> 用户名 删除用户一切</p>

<p><code>tar -c 创建包 –x 释放包 -v 显示命令过程 –z 代表压缩包</code></p>

<p><code>tar –cvf benet.tar /home/benet</code> 把/home/benet目录打包</p>

<p><code>tar –zcvf benet.tar.gz /mnt</code> 把目录打包并压缩</p>

<p><code>tar –zxvf benet.tar.gz</code> 压缩包的文件解压恢复</p>

<p><code>tar –jxvf benet.tar.bz2</code> 解压缩</p>

<p><code>make</code>编译</p>

<p><code>make install</code> 安装编译好的源码包</p>

<p><code>reboot Init 6</code>重启LINUX系统</p>

<p><code>Halt Init 0 Shutdown –h now</code> 关闭LINUX系统</p>

<p><code>uname -a</code> 查看内核版本</p>

<p><code>cat /etc/issue</code>查看ubuntu版本</p>

<p><code>lsusb</code> 查看usb设备</p>

<p><code>sudo ethtool eth0</code> 查看网卡状态</p>

<p><code>cat /proc/cpuinfo</code> 查看cpu信息</p>

<p><code>lshw</code> 查看当前硬件信息</p>

<p><code>sudo fdisk -l</code>查看磁盘信息</p>

<p><code>df -h</code>查看硬盘剩余空间</p>

<p><code>free -m</code>查看当前的内存使用情况</p>

<p><code>ps -A</code> 查看当前有哪些进程</p>

<p>kill 进程号(就是ps -A中的第一列的数字)或者 killall 进程名( 杀死一个进程)</p>

<p><code>kill -9 进程号</code>强制杀死一个进程</p>

<h3>常用apt命令：</h3>

<p><code>apt-cache search package</code> 搜索包</p>

<p><code>apt-cache show package</code> 获取包的相关信息，如说明、大小、版本等</p>

<p><code>sudo apt-get install package</code>安装包</p>

<p><code>sudo apt-get install package - - reinstall</code> 重新安装包</p>

<p><code>sudo apt-get -f install</code> 修复安装”-f = –fix-missing”</p>

<p><code>sudo apt-get remove package</code> 删除包</p>

<p><code>sudo apt-get remove package - - purge</code> 删除包，包括删除配置文件等</p>

<p><code>sudo apt-get update</code> 更新源</p>

<p><code>sudo apt-get upgrade</code> 更新已安装的包</p>

<p><code>sudo apt-get dist-upgrade</code> 升级系统</p>

<p><code>sudo apt-get dselect-upgrade</code> 使用 dselect 升级</p>

<p><code>apt-cache depends package</code> 了解使用依赖</p>

<p><code>apt-cache rdepends package</code> 是查看该包被哪些包依赖</p>

<p><code>sudo apt-get build-dep package</code> 安装相关的编译环境</p>

<p><code>apt-get source package</code> 下载该包的源代码</p>

<p><code>sudo apt-get clean</code> &amp;&amp; sudo apt-get autoclean 清理无用的包</p>

<p><code>sudo apt-get check</code> 检查是否有损坏的依赖</p>

<p><code>sudo apt-get clean</code> 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</p>

<h3>wget下载工具</h3>

<blockquote><p>wget是一种非交互式的网络文件下载工具，在linux下可以使用该工具快速地从网络上下载
所需要的文件而不需要经由本</p></blockquote>

<p>wget[参数列表]URL</p>

<p>最简单的用法:</p>

<p><code>wgethttp://targetdomain.com/file.tar</code></p>

<p>wget的常用参数：</p>

<p><code>-t[nuberoftimes]</code> 尝试次数，当wget无法与服务器建立连接时，尝试连接多少次。</p>

<p>比如”-t120″表示尝试120次。当这一项为”0″的时候，指定尝试无穷多次直到连接成功为止，这个设置非常有用，当对方服务器突然关机或者网络突然中断的时候，可以在恢复正常后继续下载没有传完的文件；</p>

<p><code>-c</code>：断点续传，这也是个非常有用的设置，特别当下载比较大的文件的时候，如果中途意外中断，那么连接恢复的时候会从上次没传完的地方接着传，而不是又从头开始，使用这一项需要远程服务器也支持断点续传，一般UNIX/linux的Web/FTP服务器都支持断点续传；</p>

<p><code>-T[numberofseconds]</code>：超时时间，指定多长时间远程服务器没有响应就中断连接，开始下一次尝试。比如”-T120″表示如果120秒以后远程服务器没有发过来数据，就重新尝试连接。如果网络速度比较快，这个时间可以设置的短些，相反，可以设置的长一些，一般最多不超过900，通常也不少于60，一般120左右比较合适；</p>

<p><code>w[numberofseconds]</code>：在两次尝试之间等待多少秒，比如”-w100″表示两次尝试之间等待100秒；</p>

<p><code>-nd</code>：不下载目录结构，把从服务器所有指定目录下载的文件都堆到当前目录里；-x：与”-nd”设置刚好相反，创建完整的目录结构，例如
<code>wget-ndhttp://www.gnu.org/</code>
实际的目录结构一级一级建下去，直到所有的文件都传完为止；</p>

<p><code>-nH</code>：不创建以目标主机域名为目录名的目录，将目标主机的目录结构直接下到当前目录下；</p>

<p><code>-r</code>：递归下载，在本录结构；-l[depth]：下载远程服务器目录结构的深度，例如”-l5″下载目录深度小于或者等于5以内的目录结构或者文件；</p>

<p><code>-m</code>：做站点镜像时的选项，如果你想做一个站点的镜像，使用这个选项，它将自动设定其他合适的选项以便于站点镜像；</p>

<p><code>-np</code>：只下载目标站点指定目录及其子目录的内容。这也是一个非常有用的选项，我们假设某个人的个人主页里面有一个指向这个站点其他人个人主页的连接，而我们只想下载这个人的个人主页，如果不设置这个选项，甚至-有可能把整个站点给抓下来，这显然是我们通常不希望的；-http-user=username-http-passwd=password：</p>

<p>如果Web服务器需要指定用户名和口令，用这两项来设定；-O将数据写入文件中。</p>

<h3>常用的tar命令</h3>

<p>tar命令的使用方法如下：
tar[参数列表][文件名]
参数列表：</p>

<blockquote><p>-c生成新的备份，并同时覆盖旧的备份文件</p>

<p>-x从备份文件中解压缩</p>

<p>-t列出备份文件内的文件目录</p>

<p>-v显示所有被操作文件列表</p>

<p>-f在指定位置生成备份</p>

<p>-u将不存在于备份中的文件，或将已经被更改的文件加入该备份中。
举例说明：</p></blockquote>

<p><code>tar cvf filename.tar</code> /<em>制作备份</em>/</p>

<p><code>tar cvf tarfile.tar</code> ./filename /<em>将filename的文件备份到tarfile.tar里面</em>/</p>

<p><code>tar tvf filename.tar</code> /<em>列出tar文档的内容</em>/</p>

<p><code>tar xvf filename.tar</code>/<em>从tar文档中导出文件</em>/</p>

<p><code>tar zxpvf filename.tar.gz</code> /<em>从tar.gz文档中导出文件</em>/</p>

<p><code>tar zxvf filename.tar.gz</code>/<em>同上</em>/</p>

<p><code>tar xvf tarfile.tar ./filename /</code><em>导出tar文件中的单个文件</em>/</p>

<p><code>tar -xzf filename.tar.gz</code> 解压</p>

<p>打包文件供下载 将目录./www打包到文件www.tar.gz</p>

<p><code>tar czvf www.tar.gz ./www</code></p>

<p>或者直接更简单的 <code>zip ./www</code></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh]]></title>
    <link href="http://justin-lu.github.io/blog/2013/07/12/ssh/"/>
    <updated>2013-07-12T08:37:00+08:00</updated>
    <id>http://justin-lu.github.io/blog/2013/07/12/ssh</id>
    <content type="html"><![CDATA[<p>本文介绍ssh相关使用.</p>

<!-- More -->


<h3>常用指令</h3>

<ol>
<li>生成本机密钥命令<code>ssh-keygen</code></li>
<li>复制远程计算机密钥到本机 ssh-copy-id + 目标主机 <code>ssh-copy-id wando@192.168.1.107</code></li>
<li>远程访问计算机 ssh + 目标主机 <code>ssh wando@192.168.1.107</code></li>
<li>远程传输文件 scp 目标主机:文件 新文件名 <code>scp wando@192.168.1.107:justin.sql justin.sql</code> 如果复制的是文件夹可以加上-r</li>
</ol>


<h4>以下是华丽的分界线,只做拓展阅读</h4>

<hr />

<ol>
<li><p>从某主机的80端口开启到本地主机2001端口的隧道 ssh -N -L2001:localhost:80 somemachine 现在你可以直接在浏览器中输入<a href="http://localhost:2001%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E3%80%82">http://localhost:2001%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E3%80%82</a></p></li>
<li><p>将你的麦克风输出到远程计算机的扬声器 dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp 这样来自你麦克风端口的声音将在SSH目标计算机的扬声器端口输出，但遗憾的是，声音质量很差，你会听到很多嘶嘶声。</p></li>
<li><p>比较远程和本地文件 ssh user@host cat /path/to/remotefile | diff /path/to/localfile – 在比较本地文件和远程文件是否有差异时这个命令很管用。</p></li>
<li><p>通过SSH挂载目录/文件系统
sshfs name@server:/path/to/folder /path/to/mount/point
从<a href="http://fuse.sourceforge.net/sshfs.html%E4%B8%8B%E8%BD%BDsshfs%EF%BC%8C%E5%AE%83%E5%85%81%E8%AE%B8%E4%BD%A0%E8%B7%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%82%E8%BD%BD%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E3%80%82">http://fuse.sourceforge.net/sshfs.html%E4%B8%8B%E8%BD%BDsshfs%EF%BC%8C%E5%AE%83%E5%85%81%E8%AE%B8%E4%BD%A0%E8%B7%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%82%E8%BD%BD%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E3%80%82</a></p></li>
<li><p>通过中间主机建立SSH连接
ssh -t reachable_host ssh unreachable_host
Unreachable_host表示从本地网络无法直接访问的主机，但可以从reachable_host所在网络访问，这个命令通过到reachable_host的“隐藏”连接，创建起到unreachable_host的连接。</p></li>
<li><p>将你的SSH公钥复制到远程主机，开启无密码登录 – 简单的方法
ssh-copy-id username@hostname</p></li>
<li>直接连接到只能通过主机B连接的主机A
ssh -t hostA ssh hostB
当然，你要能访问主机A才行。</li>
<li>创建到目标主机的持久化连接
ssh -MNf <user>@<host>
在后台创建到目标主机的持久化连接，将这个命令和你~/.ssh/config中的配置结合使用：
Host host
ControlPath ~/.ssh/master-%r@%h:%p
ControlMaster no
所有到目标主机的SSH连接都将使用持久化SSH套接字，如果你使用SSH定期同步文件（使用rsync/sftp/cvs/svn），这个命令将非常有用，因为每次打开一个SSH连接时不会创建新的套接字。</li>
<li>通过SSH连接屏幕
ssh -t remote_host screen –r
直接连接到远程屏幕会话（节省了无用的父bash进程）。</li>
<li>端口检测（敲门）
knock <host> 3000 4000 5000 &amp;&amp; ssh -p <port> user@host &amp;&amp; knock <host> 5000 4000 3000
在一个端口上敲一下打开某个服务的端口（如SSH），再敲一下关闭该端口，需要先安装knockd，下面是一个配置文件示例。
[options]
logfile = /var/log/knockd.log
[openSSH]
sequence = 3000,4000,5000
seq_timeout = 5
command = /sbin/iptables -A INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn
[closeSSH]
sequence = 5000,4000,3000
seq_timeout = 5
command = /sbin/iptables -D INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn</li>
<li>删除文本文件中的一行内容，有用的修复
ssh-keygen -R <the_offending_host>
在这种情况下，最好使用专业的工具。</li>
<li>通过SSH运行复杂的远程shell命令
ssh host -l user $(&lt;cmd.txt)
更具移植性的版本：
ssh host -l user “<code>cat cmd.txt</code>”</li>
<li>通过SSH将MySQL数据库复制到新服务器
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost “mysql -uUSER -pPASS NEW_DB_NAME”
通过压缩的SSH隧道Dump一个MySQL数据库，将其作为输入传递给mysql命令，我认为这是迁移数据库到新服务器最快最好的方法。</li>
<li>删除文本文件中的一行，修复“SSH主机密钥更改”的警告
sed -i 8d ~/.ssh/known_hosts</li>
<li>从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器
cat ~/.ssh/id_rsa.pub | ssh user@machine “mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys”
如果你使用Mac OS X或其它没有ssh-copy-id命令的*nix变种，这个命令可以将你的公钥复制到远程主机，因此你照样可以实现无密码SSH登录。</li>
<li>实时SSH网络吞吐量测试
yes | pv | ssh $host “cat > /dev/null”
通过SSH连接到主机，显示实时的传输速度，将所有传输数据指向/dev/null，需要先安装pv。
如果是Debian：
apt-get install pv
如果是Fedora：
yum install pv
（可能需要启用额外的软件仓库）。</li>
<li>如果建立一个可以重新连接的远程GNU screen
ssh -t <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x75;&#x73;&#101;&#x72;&#64;&#x73;&#111;&#x6d;&#101;&#46;&#100;&#x6f;&#x6d;&#97;&#105;&#x6e;&#x2e;&#x63;&#x6f;&#x6d;">&#117;&#x73;&#x65;&#114;&#x40;&#115;&#x6f;&#x6d;&#101;&#46;&#100;&#111;&#x6d;&#97;&#x69;&#110;&#46;&#x63;&#x6f;&#109;</a> /usr/bin/screen –xRR
人们总是喜欢在一个文本终端中打开许多shell，如果会话突然中断，或你按下了“Ctrl-a d”，远程主机上的shell不会受到丝毫影响，你可以重新连接，其它有用的screen命令有“Ctrl-a c”（打开新的shell）和“Ctrl-a a”（在shell之间来回切换），请访问<a href="http://aperiodic.net/screen/quick_reference%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8Escreen%E5%91%BD%E4%BB%A4%E7%9A%84%E5%BF%AB%E9%80%9F%E5%8F%82%E8%80%83%E3%80%82">http://aperiodic.net/screen/quick_reference%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8Escreen%E5%91%BD%E4%BB%A4%E7%9A%84%E5%BF%AB%E9%80%9F%E5%8F%82%E8%80%83%E3%80%82</a></li>
<li>继续SCP大文件
rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file
它可以恢复失败的rsync命令，当你通过VPN传输大文件，如备份的数据库时这个命令非常有用，需要在两边的主机上安装rsync。
rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file local -> remote
或
rsync –partial –progress –rsh=ssh $user@$host:$remote_file $destination_file remote -> local</li>
<li>通过SSH W/ WIRESHARK分析流量
ssh <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x72;&#x6f;&#x6f;&#116;&#64;&#115;&#x65;&#114;&#x76;&#101;&#x72;&#46;&#99;&#x6f;&#109;">&#114;&#x6f;&#111;&#x74;&#x40;&#115;&#101;&#114;&#x76;&#101;&#x72;&#x2e;&#99;&#111;&#x6d;</a> ‘tshark -f “port !22″ -w -&lsquo; | wireshark -k -i –
使用tshark捕捉远程主机上的网络通信，通过SSH连接发送原始pcap数据，并在wireshark中显示，按下Ctrl+C将停止捕捉，但也会关闭wireshark窗口，可以传递一个“-c #”参数给tshark，让它只捕捉“#”指定的数据包类型，或通过命名管道重定向数据，而不是直接通过SSH传输给wireshark，我建议你过滤数据包，以节约带宽，tshark可以使用tcpdump替代：
ssh <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x72;&#x6f;&#111;&#x74;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#109;">&#114;&#111;&#111;&#x74;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a> tcpdump -w – ‘port !22′ | wireshark -k -i –</li>
<li>保持SSH会话永久打开
autossh -M50000 -t server.example.com ‘screen -raAd mysession’
打开一个SSH会话后，让其保持永久打开，对于使用笔记本电脑的用户，如果需要在Wi-Fi热点之间切换，可以保证切换后不会丢失连接。</li>
<li>更稳定，更快，更强的SSH客户端
ssh -4 -C -c blowfish-cbc
强制使用IPv4，压缩数据流，使用Blowfish加密。</li>
<li>使用cstream控制带宽
tar -cj /backup | cstream -t 777k | ssh host ‘tar -xj -C /backup’
使用bzip压缩文件夹，然后以777k bit/s速率向远程主机传输。Cstream还有更多的功能，请访问<a href="http://www.cons.org/cracauer/cstream.html#usage%E4%BA%86%E8%A7%A3%E8%AF%A6%E6%83%85%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%9A">http://www.cons.org/cracauer/cstream.html#usage%E4%BA%86%E8%A7%A3%E8%AF%A6%E6%83%85%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%9A</a>
echo w00t, i’m 733+ | cstream -b1 -t2</li>
<li>一步将SSH公钥传输到另一台机器
ssh-keygen; ssh-copy-id user@host; ssh user@host
这个命令组合允许你无密码SSH登录，注意，如果在本地机器的~/.ssh目录下已经有一个SSH密钥对，ssh-keygen命令生成的新密钥可能会覆盖它们，ssh-copy-id将密钥复制到远程主机，并追加到远程账号的~/.ssh/authorized_keys文件中，使用SSH连接时，如果你没有使用密钥口令，调用ssh user@host后不久就会显示远程shell。</li>
<li>将标准输入（stdin）复制到你的X11缓冲区
ssh user@host cat /path/to/some/file | xclip</li>
</ol>

]]></content>
  </entry>
  
</feed>
